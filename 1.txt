func resolveIpAddress(fromHostname hostname: String) -> String {
    let components = hostname.split(separator: ":")
    guard components.count == 2, let port = components.last else {
        fatalError("Invalid hostname format: \(hostname)")
    }
    let hostname = String(components.first!)
    
    var hints = addrinfo()
    hints.ai_family = AF_INET
    hints.ai_socktype = SOCK_STREAM
    
    var result: UnsafeMutablePointer<addrinfo>?
    let status = getaddrinfo(hostname, port, &hints, &result)
    
    guard status == 0, let res = result else {
        fatalError("Failed to resolve address for \(hostname):\(port)")
    }
    
    let ipAddress = String(cString: inet_ntoa((res.pointee.ai_addr as! sockaddr_in).sin_addr))
    let newString = "\(ipAddress):\(port)"
    
    freeaddrinfo(result)
    return newString
}

let inputs = [
    "www.example.com:8080",
    "localhost:3000",
    "127.0.0.1:8080",
    "172.16.0.1:80",
    "2001:0db8:85a3:0000:0000:8a2e:0370:7334:8080",
    "[2001:0db8:85a3:0000:0000:8a2e:0370:7334]:8080",
    "example.com:65535",
    "example.com:65536",
    "example.com",
    "example:com:80"
]

for input in inputs {
    do {
        let ipAddress = try resolveIpAddress(from: input)
        print("\(input) -> \(ipAddress)")
    } catch {
        print("\(input) -> Error: \(error)")
    }
}

func resolveHostname(_ hostname: String) -> [String]? {
    var hints = addrinfo()
    hints.ai_family = AF_UNSPEC
    hints.ai_socktype = SOCK_STREAM

    var res: UnsafeMutablePointer<addrinfo>?
    let status = getaddrinfo(hostname, nil, &hints, &res)
    guard status == 0 else {
        return nil
    }
    defer {
        freeaddrinfo(res)
    }

    var addrStrings = [String]()
    var ptr = res
    while ptr != nil {
        let flags = Int32(NI_NUMERICHOST)
        var addr = UnsafeMutablePointer<Int8>.allocate(capacity: Int(NI_MAXHOST))
        defer {
            addr.deallocate()
        }

        let gaiStatus = getnameinfo(ptr!.ai_addr, socklen_t(ptr!.ai_addrlen),
                                    addr, socklen_t(NI_MAXHOST), nil, 0, flags)
        if gaiStatus != 0 {
            return nil
        }
        addrStrings.append(String(cString: addr))

        ptr = ptr!.ai_next
    }

    return addrStrings
}

import Foundation
import CoreFoundation

let hostName = "www.apple.com"
var addrInfo: UnsafeMutablePointer<CFArray?>?

let host = CFHostCreateWithName(nil, hostName as CFString)
if CFHostStartInfoResolution(host, .addresses, nil) {
    addrInfo = CFHostGetAddressing(host, nil)!
}

if let addresses = addrInfo?.pointee as? [Data] {
    for address in addresses {
        var hostname = [CChar](repeating: 0, count: Int(NI_MAXHOST))
        let saLen = socklen_t(MemoryLayout<sockaddr>.size)
        let result = address.withUnsafeBytes { (rawAddress) -> Int32 in
            getnameinfo(rawAddress.bindMemory(to: sockaddr.self).baseAddress, saLen,
                        &hostname, socklen_t(hostname.count), nil, 0, NI_NUMERICHOST)
        }
        if result == 0 {
            if let addressStr = String(validatingUTF8: hostname) {
                print("IP address: \(addressStr)")
            }
        } else {
            print("Could not convert address to string")
        }
    }
}